#!/usr/bin/env python
import os
import subprocess
import sys
from glob import glob
from os.path import splitext, basename

import setuptools

__version__ = None
exec(open("src/slack_bolt/version.py").read())

with open("README.md", "r") as fh:
    long_description = fh.read()

here = os.path.abspath(os.path.dirname(__file__))

codegen_dependencies = [
    "black==19.10b0",
]

test_dependencies = [
    "pytest>=5,<6",
    "pytest-asyncio<1",  # for async
    "aiohttp>=3,<4",  # for async
]


class CodegenCommand(setuptools.Command):
    user_options = []

    @staticmethod
    def status(s):
        """Prints things in bold."""
        print("\033[1m{0}\033[0m".format(s))

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def _run(self, s, command):
        try:
            self.status(s + "\n" + " ".join(command))
            subprocess.check_call(command)
        except subprocess.CalledProcessError as error:
            sys.exit(error.returncode)

    def run(self):
        self._run("Installing required dependencies ...",
                  [sys.executable, "-m", "pip", "install"] + codegen_dependencies)

        header = "# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" \
                 "#\n" \
                 "#  *** DO NOT EDIT THIS FILE ***\n" \
                 "#\n" \
                 "#  1) Modify slack/web/client.py\n" \
                 "#  2) Run `python setup.py codegen`\n" \
                 "#\n" \
                 "# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" \
                 "\n"
        with open("./src/slack_sdk/web/client.py", "r") as original:
            source = original.read()
            import re
            async_source = header + source
            async_source = re.sub("    def ", "    async def ", async_source)
            async_source = re.sub("from asyncio import Future\n", "", async_source)
            async_source = re.sub("return self.api_call\(", "return await self.api_call(", async_source)
            async_source = re.sub("-> SlackResponse", "-> AsyncSlackResponse", async_source)
            async_source = re.sub(
                "from .base_client import BaseClient, SlackResponse",
                "from .async_base_client import AsyncBaseClient, AsyncSlackResponse", async_source)
            # from slack_sdk import WebClient
            async_source = re.sub(
                "class WebClient\(BaseClient\):",
                "class AsyncWebClient(AsyncBaseClient):", async_source)
            async_source = re.sub(
                "from slack_sdk import WebClient",
                "from slack_sdk.web.async_client import AsyncWebClient", async_source)
            async_source = re.sub(
                "= WebClient\(",
                "= AsyncWebClient(", async_source)
            with open('./src/slack_sdk/web/async_client.py', 'w') as output:
                output.write(async_source)

            legacy_source = header + "from asyncio import Future\n" + source
            legacy_source = re.sub("-> SlackResponse", "-> Union[Future, SlackResponse]", legacy_source)
            legacy_source = re.sub(
                "from .base_client import BaseClient, SlackResponse",
                "from .legacy_base_client import LegacyBaseClient, SlackResponse", legacy_source)
            legacy_source = re.sub(
                "class WebClient\(BaseClient\):",
                "class LegacyWebClient(LegacyBaseClient):", legacy_source)
            legacy_source = re.sub(
                "from slack_sdk import WebClient",
                "from slack_sdk.web.legacy_client import LegacyWebClient", legacy_source)
            legacy_source = re.sub(
                "= WebClient\(",
                "= LegacyWebClient(", legacy_source)
            with open('./src/slack_sdk/web/legacy_client.py', 'w') as output:
                output.write(legacy_source)

            self._run("Running black (code formatter) ... ",
                      [sys.executable, "-m", "black", f"{here}/src"])


setuptools.setup(
    name="slack_bolt",
    version=__version__,
    author="Slack Technologies, Inc.",
    author_email="opensource@slack.com",
    description="The Bolt Framework for Python",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/slackapi/bolt-python",
    packages=setuptools.find_packages("src"),
    package_dir={"": "src"},
    py_modules=[splitext(basename(path))[0] for path in glob('src/*.py')],
    setup_requires=["pytest-runner==5.2"],
    # python setup.py test
    tests_require=test_dependencies,
    install_requires=[],
    extras_require={
        # pip install -e ".[testing]"
        # python -m pytest tests/scenario_tests/test_async_events.py
        "testing": test_dependencies,
        # pip install -e ".[adapters]"
        "adapters": [
            "aiohttp>=3,<4",  # slackclient depends on aiohttp
            # used only under src/slack_bolt/adapter
            "bottle>=0.12,<1",
            "chalice>=1,<2",
            "click>=7,<8",  # for chalice
            "Django>=3,<4",
            "falcon>=2,<3",
            "fastapi>=0.54,<0.55",
            "Flask>=1,<2",
            "pyramid>=1,<2",
            "sanic>=20,<21",
            "starlette>=0.13,<1",
            "tornado>=6,<7",
            # used only under src/slack_sdk/*_store
            "boto3<=2",
        ]
    },
    classifiers=[
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: Implementation :: CPython",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
    python_requires='>=3.6',
    cmdclass={
        "codegen": CodegenCommand,
    },
)
